'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Send } from 'lucide-react';
import { useTheme } from '@/components/theme-provider';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

const aiSuggestions = [
  'Create a professional dark theme for a SaaS dashboard',
  'Design a warm, welcoming theme for a healthcare app',
  'Generate a vibrant, energetic theme for a fitness platform',
  'Make a minimalist theme with subtle accent colors',
  'Create a luxurious theme with gold accents for premium apps',
  'Design a nature-inspired theme with earth tones',
];

const aiResponses = [
  {
    message: "I've created a professional dark theme perfect for SaaS dashboards. It features deep blues with bright accent colors for excellent readability and modern appeal.",
    suggestions: ['Make it lighter', 'Add more contrast', 'Try purple accents', 'Generate variations']
  },
  {
    message: "Here's a warm healthcare theme with soft greens and calming blues. The colors promote trust and comfort while maintaining professional standards.",
    suggestions: ['Softer colors', 'Add warmth', 'More accessibility', 'Try pastels']
  },
  {
    message: "I've designed an energetic fitness theme with vibrant oranges and dynamic gradients. Perfect for motivating users and creating excitement.",
    suggestions: ['More vibrant', 'Add neon touches', 'Try different sports colors', 'Make it bolder']
  }
];

export default function AiThemeGenerator() {
  const { themes, setTheme, currentTheme } = useTheme();
  const [aiInput, setAiInput] = useState('');
  const [aiMessages, setAiMessages] = useState<Array<{type: 'user' | 'ai', content: string, suggestions?: string[]}>>([]);
  const [themeHistory, setThemeHistory] = useState<any[]>([]);
  const [primaryColor, setPrimaryColor] = useState('#000000');
  const [secondaryColor, setSecondaryColor] = useState('#f1f5f9');
  const [font, setFont] = useState('var(--font-inter)');

  const [isLoading, setIsLoading] = useState(false);

  const handleAiSubmit = async (input: string) => {
    if (!input.trim()) return;

    const newMessages = [...aiMessages, { type: 'user' as const, content: input }];
    setAiMessages(newMessages);
    setAiInput('');
    setIsLoading(true);

    try {
      const response = await fetch('/api/generate-theme', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt: input }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate theme');
      }

      const theme = await response.json();
      setTheme(theme);
      setAiMessages([
        ...newMessages, 
        { 
          type: 'ai' as const, 
          content: `I have created a new theme based on your prompt: "${input}".`,
        }
      ]);
    } catch (error) {
      console.error(error);
      setAiMessages([
        ...newMessages, 
        { 
          type: 'ai' as const, 
          content: 'Sorry, I was unable to generate a theme. Please try again.',
        }
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateTheme = () => {
    const newTheme = {
      id: 'custom',
      name: 'Custom Theme',
      description: 'A custom theme generated by the form.',
      colors: {
        ...currentTheme.colors,
        primary: primaryColor,
        secondary: secondaryColor,
      },
      fonts: {
        sans: font,
      },
    };
    // @ts-ignore
    setTheme(newTheme);
  };

  return (
    <section id="ai-generator" className="mb-16">
      <h2 className="text-3xl font-bold mb-6">AI Theme Generator</h2>
      <Card>
        <Tabs defaultValue="chat">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="chat">Chat</TabsTrigger>
            <TabsTrigger value="form">Form</TabsTrigger>
          </TabsList>
          <TabsContent value="chat">
            <CardHeader>
              <CardTitle className="text-lg">Chat with AI</CardTitle>
              <CardDescription>
                Tell me what kind of theme you're looking for
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {aiMessages.length === 0 && (
                <div className="space-y-3">
                  <p className="text-sm font-medium">Try these prompts:</p>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    {aiSuggestions.map((suggestion, index) => (
                      <Button
                        key={index}
                        variant="outline"
                        size="sm"
                        className="justify-start text-left h-auto p-3"
                        onClick={() => handleAiSubmit(suggestion)}
                      >
                        {suggestion}
                      </Button>
                    ))}
                  </div>
                </div>
              )}

              {aiMessages.length > 0 && (
                <div className="space-y-4 max-h-64 overflow-y-auto">
                  {aiMessages.map((message, index) => (
                    <div key={index} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                      <div className={`max-w-[80%] p-3 rounded-lg ${
                        message.type === 'user'
                          ? 'bg-primary text-primary-foreground'
                          : 'bg-muted'
                      }`}>
                        <p className="text-sm">{message.content}</p>
                        {message.suggestions && (
                          <div className="mt-3 space-y-2">
                            <p className="text-xs opacity-75">Try these refinements:</p>
                            <div className="grid grid-cols-2 gap-1">
                              {message.suggestions.map((suggestion, idx) => (
                                <Button
                                  key={idx}
                                  variant="outline"
                                  size="sm"
                                  className="text-xs h-7"
                                  onClick={() => handleAiSubmit(suggestion)}
                                >
                                  {suggestion}
                                </Button>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}

              <div className="flex space-x-2 pt-4">
                <Input
                  placeholder="Describe your ideal theme..."
                  value={aiInput}
                  onChange={(e) => setAiInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleAiSubmit(aiInput)}
                  disabled={isLoading}
                />
                <Button onClick={() => handleAiSubmit(aiInput)} disabled={!aiInput.trim() || isLoading}>
                  {isLoading ? <div className="w-4 h-4 border-2 border-t-transparent rounded-full animate-spin" /> : <Send className="w-4 h-4" />}
                </Button>
              </div>
            </CardContent>
          </TabsContent>
          <TabsContent value="form">
            <CardHeader>
              <CardTitle className="text-lg">Generate with Form</CardTitle>
              <CardDescription>
                Use this form to generate a new theme with your desired settings.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Primary Color</label>
                  <Input type="color" value={primaryColor} onChange={(e) => setPrimaryColor(e.target.value)} />
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">Secondary Color</label>
                  <Input type="color" value={secondaryColor} onChange={(e) => setSecondaryColor(e.target.value)} />
                </div>
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium">Font</label>
                <Select value={font} onValueChange={setFont}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a font" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="var(--font-inter)">Inter</SelectItem>
                    <SelectItem value="var(--font-poppins)">Poppins</SelectItem>
                    <SelectItem value="var(--font-roboto)">Roboto</SelectItem>
                    <SelectItem value="var(--font-lato)">Lato</SelectItem>
                    <SelectItem value="var(--font-merriweather)">Merriweather</SelectItem>
                    <SelectItem value="var(--font-orbitron)">Orbitron</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <Button className="w-full" onClick={handleGenerateTheme}>Generate Theme</Button>
            </CardContent>
          </TabsContent>
        </Tabs>
      </Card>
    </section>
  );
}
